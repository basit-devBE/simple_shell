B.\"Manpage for simple shell"

.\"Created by MOhammed Basit Abdul and Atandoh Aria"
.TH HSH 1 "June 2023" "ALX Africa" "SHELL - Simple Shell man page"

.SH NAME
hsh\fR \- basic UNIX command interpreter

.SH SYNOPSIS
hsh\fR [\fIfilename\fR]

.SH COPYRIGHT
hsh is Copyright (C) 2023 by MOhammed Basit Abdul and Atandoh Aria

.SH DESCRIPTION
hsh\fR is a sh-compatible command language interpreter that executes commands read from the standard input or from a file.

.SH ARGUMENTS
If there are remaining arguments after processing options, the first argument is assumed to be the name of a file containing shell commands. hsh reads and executes commands from this file, then exits. The exit status of hsh is the exit status of the last command executed in the script. If no commands are executed, the exit status is 0. First, hsh attempts to open the file in the current directory. If no file is found, then the shell searches the directories in PATH for the script.

.SH INVOCATION
hsh is started with the standard input connected to the terminal (as determined by \fIisatty(3)\fR), and the interactive mode is executed. It can also be executed non-interactively.
When hsh is executed interactively, the prompt \fI^-^ \fRis displayed to read any command. The command line argument is invoked and treated as the first argument.

.SH DEFINITIONS
The following definitions are used throughout the rest of this document.

- \fIblank\fR

A space or tab.

- \fIword\fR

A sequence of characters considered as a single unit by the shell. Also referred to as a token\fR.

- \fIname\fR

A word consisting only of alphanumeric characters and underscores, and starting with an alphabetic character or an underscore. Also known as an identifier\fR.

- \fIcontrol operator\fR

A token that performs a control function. It can be one of the following symbols:
|| & && ; ;;

.SH Command Execution
After a command has been split into words, if it results in a simple command and an optional list of arguments, the following actions are taken.

If the command name does not contain slashes, the shell tries to locate it. If there is a shell function with that name, the function is invoked. If the name does not match a function, the shell searches for it in the list of shell builtins. If a match is found, that builtin is invoked.

If the name is neither a shell function nor a builtin and does not contain slashes, the shell searches each element of the \fIPATH\fR for a directory containing an executable file with that name. \fIhsh\fR uses a hash table to remember the full pathnames of executable files. A full search of the directories in \fIPATH\fR is performed only if the command is not found in the hash table. If the search is unsuccessful, the shell searches for a defined shell function named "command not found". If the function exists, it is invoked with the original command and its arguments, and the function's exit status becomes the exit status of the shell. If that function is not defined, the shell prints an error message and returns an exit status of 127.

If the search is successful or if the command name contains one or more slashes, the shell executes the named program in a separate execution environment. Argument 0 is set to the given name, and the remaining arguments to the command are set accordingly.

.SH Environment
hsh\fR inherits a copy of the parent process

's environment from \fBBash\fR when it is executed. The environment is an array of strings containing variables in the format name=value.
When a program is invoked, it receives an array of strings called the environment. This is a list of name-value pairs in the format name=value.

The shell provides several ways to manipulate the environment. On startup, the shell scans its own environment and creates a parameter for each name found, automatically marking it for export to child processes. Executed commands inherit the environment. The export and declare -x commands allow adding and deleting parameters and functions from the environment.

.SH Exit Status
The exit status of hsh\fR for an executed command is the value returned by the waitpid system call or its equivalent function. A command that exits with a zero exit status has succeeded. An exit status of zero indicates success, while a non-zero exit status indicates failure.

If a command is not found, the child process created to execute it returns a status of 127.

All builtins return zero on success and one or two on incorrect usage (which is indicated by an accompanying error message).

.SH BUILTINS
The following builtin commands are supported:

.B env

- Display the current environment.

.B setenv [Variable] [Value]

- Create a new environment variable or modify an existing one.

.B unsetenv [Variable]

- Remove an environmental variable.

.B exit [Status]

- Exit the shell.

.B cd [Directory]

- Change the current directory of the process to DIRECTORY. If no argument is given, the command is interpreted as cd $HOME. If the argument - is given, the command is interpreted as cd $OLDPWD. The environment variables PWD and OLDPWD are updated after changing the directory.

.B help

- Display the help message of a builtin command.

.SH SEE ALSO
access(2), chdir(2), execve(2), _exit(2), exit(3), fflush(3), fork(2), free(3), isatty(3), getcwd(3), malloc(3), open(2), read(2), sh(1), signal(2), stat(2), wait(2), write(2)
hsh\fR incorporates basic functionality from the \fBsh\fR shell. This man page is based on the man page for bash(1).

.SH AUTHORS
MOhammed Basit Abdul and Atandoh Aria
